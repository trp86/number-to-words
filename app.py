from flask import Flask, jsonify, request
from flask_cors import CORS
from num2words import num2words
import json

app = Flask(__name__, static_folder='.', static_url_path='')
CORS(app)

# List of languages supported by num2words based on testing
# These languages are confirmed to be implemented in the num2words library
SUPPORTED_LANGUAGES = {
    'am': 'Amharic',
    'ar': 'Arabic',
    'az': 'Azerbaijani',
    'be': 'Belarusian',
    'bn': 'Bengali',
    'ca': 'Catalan',
    'ce': 'Chechen',
    'cs': 'Czech',
    'cy': 'Welsh',
    'da': 'Danish',
    'de': 'German',
    'en': 'English',
    'es': 'Spanish',
    'fa': 'Persian',
    'fi': 'Finnish',
    'fr': 'French',
    'he': 'Hebrew',
    'hu': 'Hungarian',
    'id': 'Indonesian',
    'is': 'Icelandic',
    'it': 'Italian',
    'ja': 'Japanese',
    'kn': 'Kannada',
    'ko': 'Korean',
    'lt': 'Lithuanian',
    'lv': 'Latvian',
    'nl': 'Dutch',
    'no': 'Norwegian',
    'pl': 'Polish',
    'pt': 'Portuguese',
    'ro': 'Romanian',
    'ru': 'Russian',
    'sk': 'Slovak',
    'sl': 'Slovenian',
    'sr': 'Serbian',
    'sv': 'Swedish',
    'te': 'Telugu',
    'th': 'Thai',
    'tr': 'Turkish',
    'uk': 'Ukrainian',
    'vi': 'Vietnamese'
}

# Language to flag emoji mapping
LANGUAGE_FLAGS = {
    'am': 'ðŸ‡ªðŸ‡¹',  # Amharic - Ethiopia flag
    'ar': 'ðŸ‡¸ðŸ‡¦',  # Arabic - Saudi Arabia flag
    'az': 'ðŸ‡¦ðŸ‡¿',  # Azerbaijani - Azerbaijan flag
    'be': 'ðŸ‡§ðŸ‡¾',  # Belarusian - Belarus flag
    'bn': 'ðŸ‡§ðŸ‡©',  # Bengali - Bangladesh flag
    'ca': 'ðŸ‡ªðŸ‡¸',  # Catalan - Spain flag (using Spain as fallback)
    'ce': 'ðŸ‡·ðŸ‡º',  # Chechen - Russia flag (using Russia as fallback)
    'cs': 'ðŸ‡¨ðŸ‡¿',  # Czech - Czech Republic flag
    'cy': 'ðŸ‡¬ðŸ‡§',  # Welsh - UK flag
    'da': 'ðŸ‡©ðŸ‡°',  # Danish - Denmark flag
    'de': 'ðŸ‡©ðŸ‡ª',  # German - Germany flag
    'en': 'ðŸ‡ºðŸ‡¸',  # English - USA flag
    'es': 'ðŸ‡ªðŸ‡¸',  # Spanish - Spain flag
    'fa': 'ðŸ‡®ðŸ‡·',  # Persian - Iran flag
    'fi': 'ðŸ‡«ðŸ‡®',  # Finnish - Finland flag
    'fr': 'ðŸ‡«ðŸ‡·',  # French - France flag
    'he': 'ðŸ‡®ðŸ‡±',  # Hebrew - Israel flag
    'hu': 'ðŸ‡­ðŸ‡º',  # Hungarian - Hungary flag
    'id': 'ðŸ‡®ðŸ‡©',  # Indonesian - Indonesia flag
    'is': 'ðŸ‡®ðŸ‡¸',  # Icelandic - Iceland flag
    'it': 'ðŸ‡®ðŸ‡¹',  # Italian - Italy flag
    'ja': 'ðŸ‡¯ðŸ‡µ',  # Japanese - Japan flag
    'kn': 'ðŸ‡®ðŸ‡³',  # Kannada - India flag
    'ko': 'ðŸ‡°ðŸ‡·',  # Korean - South Korea flag
    'lt': 'ðŸ‡±ðŸ‡¹',  # Lithuanian - Lithuania flag
    'lv': 'ðŸ‡±ðŸ‡»',  # Latvian - Latvia flag
    'nl': 'ðŸ‡³ðŸ‡±',  # Dutch - Netherlands flag
    'no': 'ðŸ‡³ðŸ‡´',  # Norwegian - Norway flag
    'pl': 'ðŸ‡µðŸ‡±',  # Polish - Poland flag
    'pt': 'ðŸ‡µðŸ‡¹',  # Portuguese - Portugal flag
    'ro': 'ðŸ‡·ðŸ‡´',  # Romanian - Romania flag
    'ru': 'ðŸ‡·ðŸ‡º',  # Russian - Russia flag
    'sk': 'ðŸ‡¸ðŸ‡°',  # Slovak - Slovakia flag
    'sl': 'ðŸ‡¸ðŸ‡®',  # Slovenian - Slovenia flag
    'sr': 'ðŸ‡·ðŸ‡¸',  # Serbian - Serbia flag
    'sv': 'ðŸ‡¸ðŸ‡ª',  # Swedish - Sweden flag
    'te': 'ðŸ‡®ðŸ‡³',  # Telugu - India flag
    'th': 'ðŸ‡¹ðŸ‡­',  # Thai - Thailand flag
    'tr': 'ðŸ‡¹ðŸ‡·',  # Turkish - Turkey flag
    'uk': 'ðŸ‡ºðŸ‡¦',  # Ukrainian - Ukraine flag
    'vi': 'ðŸ‡»ðŸ‡³'   # Vietnamese - Vietnam flag
}

@app.route('/')
def index():
    return app.send_static_file('index.html')

@app.route('/api/languages', methods=['GET'])
def get_languages():
    languages = []
    for code, name in SUPPORTED_LANGUAGES.items():
        languages.append({
            'code': code,
            'name': name,
            'flag': LANGUAGE_FLAGS.get(code, '')
        })
    return jsonify(languages)

@app.route('/api/convert', methods=['POST'])
def convert_number():
    data = request.get_json()
    
    if not data or 'number' not in data or 'language' not in data:
        return jsonify({'error': 'Missing number or language parameter'}), 400
    
    try:
        number = float(data['number'])
        language = data['language']
        
        if language not in SUPPORTED_LANGUAGES:
            return jsonify({'error': f'Language {language} not supported'}), 400
        
        # Check if the number is too large
        if abs(number) > 10**15:
            return jsonify({'error': 'Number too large (max 15 digits)'}), 400
        
        # Convert the number to words
        words = num2words(number, lang=language)
        
        return jsonify({
            'number': data['number'],
            'language': language,
            'words': words
        })
    except ValueError:
        return jsonify({'error': 'Invalid number format'}), 400
    except NotImplementedError:
        return jsonify({'error': f'Language {language} not implemented'}), 400
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True, port=5000)